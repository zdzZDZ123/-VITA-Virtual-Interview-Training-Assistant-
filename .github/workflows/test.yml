name: VITA Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock httpx
    
    - name: Run tests with coverage
      run: |
        cd backend
        pytest tests/ -v --cov=core --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./backend/coverage.xml
        flags: backend
        name: backend-${{ matrix.os }}-py${{ matrix.python-version }}
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-backend-${{ matrix.os }}-py${{ matrix.python-version }}
        path: backend/htmlcov/

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Install Playwright
      run: |
        cd frontend
        npx playwright install --with-deps chromium
    
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e || true  # Continue even if tests fail for now
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report
        path: frontend/playwright-report/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Start backend server
      run: |
        cd backend
        python main.py &
        sleep 10  # Wait for server to start
    
    - name: Test API health
      run: |
        curl -f http://localhost:8000/health || exit 1
    
    - name: Test WebSocket endpoint
      run: |
        python -c "
        import asyncio
        import websockets
        import json
        
        async def test_ws():
            uri = 'ws://localhost:8000/api/v1/ws/test-session'
            try:
                async with websockets.connect(uri) as websocket:
                    await websocket.send(json.dumps({'type': 'ping'}))
                    response = await websocket.recv()
                    print(f'WebSocket response: {response}')
                    return True
            except Exception as e:
                print(f'WebSocket test failed: {e}')
                return False
        
        result = asyncio.run(test_ws())
        exit(0 if result else 1)
        "

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort mypy
    
    - name: Run flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
    
    - name: Check code formatting with black
      run: |
        cd backend
        black --check . || true
    
    - name: Check import sorting
      run: |
        cd backend
        isort --check-only . || true